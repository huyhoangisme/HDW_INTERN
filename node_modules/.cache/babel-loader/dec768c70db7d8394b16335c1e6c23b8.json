{"ast":null,"code":"import { combineReducers, configureStore } from '@reduxjs/toolkit';\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\nimport authReducer from 'features/auth/authSlice';\nimport createSagaMiddleware from 'redux-saga';\nimport counterReducer from '../features/counter/counterSlice';\nimport { history } from '../utils';\nimport rootSaga from './rootSaga';\nconst sagaMiddleware = createSagaMiddleware();\nconst rootReducer = combineReducers({\n  router: connectRouter(history),\n  counter: counterReducer,\n  auth: authReducer\n});\nexport const store = configureStore({\n  reducer: rootReducer,\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    thunk: true\n  }).concat(sagaMiddleware, routerMiddleware(history)),\n  devTools: true\n});\nsagaMiddleware.run(rootSaga);","map":{"version":3,"names":["combineReducers","configureStore","connectRouter","routerMiddleware","authReducer","createSagaMiddleware","counterReducer","history","rootSaga","sagaMiddleware","rootReducer","router","counter","auth","store","reducer","middleware","getDefaultMiddleware","thunk","concat","devTools","run"],"sources":["C:/Workspace/INTERN/react-saga/src/app/store.ts"],"sourcesContent":["import { Action, combineReducers, configureStore, ThunkAction } from '@reduxjs/toolkit';\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\nimport authReducer from 'features/auth/authSlice';\nimport createSagaMiddleware from 'redux-saga';\nimport counterReducer from '../features/counter/counterSlice';\nimport { history } from '../utils';\nimport rootSaga from './rootSaga';\nconst sagaMiddleware = createSagaMiddleware();\n\nconst rootReducer = combineReducers({\n\trouter: connectRouter(history),\n\tcounter: counterReducer,\n\tauth: authReducer,\n});\nexport const store = configureStore({\n\treducer: rootReducer,\n\tmiddleware: (getDefaultMiddleware) =>\n\t\tgetDefaultMiddleware({\n\t\t\tthunk: true,\n\t\t}).concat(sagaMiddleware, routerMiddleware(history)),\n\tdevTools: true,\n});\n\nsagaMiddleware.run(rootSaga);\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n\tReturnType,\n\tRootState,\n\tunknown,\n\tAction<string>\n>;\n"],"mappings":"AAAA,SAAiBA,eAAjB,EAAkCC,cAAlC,QAAqE,kBAArE;AACA,SAASC,aAAT,EAAwBC,gBAAxB,QAAgD,wBAAhD;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,SAASC,OAAT,QAAwB,UAAxB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,MAAMC,cAAc,GAAGJ,oBAAoB,EAA3C;AAEA,MAAMK,WAAW,GAAGV,eAAe,CAAC;EACnCW,MAAM,EAAET,aAAa,CAACK,OAAD,CADc;EAEnCK,OAAO,EAAEN,cAF0B;EAGnCO,IAAI,EAAET;AAH6B,CAAD,CAAnC;AAKA,OAAO,MAAMU,KAAK,GAAGb,cAAc,CAAC;EACnCc,OAAO,EAAEL,WAD0B;EAEnCM,UAAU,EAAGC,oBAAD,IACXA,oBAAoB,CAAC;IACpBC,KAAK,EAAE;EADa,CAAD,CAApB,CAEGC,MAFH,CAEUV,cAFV,EAE0BN,gBAAgB,CAACI,OAAD,CAF1C,CAHkC;EAMnCa,QAAQ,EAAE;AANyB,CAAD,CAA5B;AASPX,cAAc,CAACY,GAAf,CAAmBb,QAAnB"},"metadata":{},"sourceType":"module"}