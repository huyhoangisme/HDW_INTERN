{"ast":null,"code":"import { fork, take } from 'redux-saga/effects';\nimport { authActions } from './authSlice';\n\nfunction* handleLogin(payload) {\n  console.log('Login', payload);\n}\n\nfunction* handleLogout() {\n  console.log('Logout');\n}\n\nfunction* watchLoginFlow() {\n  while (true) {\n    const action = yield take(authActions.login.type);\n    yield fork(handleLogin, action.payload);\n    yield take(authActions.logout.type);\n    yield fork(handleLogout);\n  }\n}\n\nexport default function* authSaga() {\n  yield fork(watchLoginFlow);\n}","map":{"version":3,"names":["fork","take","authActions","handleLogin","payload","console","log","handleLogout","watchLoginFlow","action","login","type","logout","authSaga"],"sources":["C:/Workspace/INTERN/react-saga/src/features/auth/authSaga.ts"],"sourcesContent":["import { PayloadAction } from '@reduxjs/toolkit';\r\nimport { fork, take } from 'redux-saga/effects';\r\nimport { authActions, LoginPayload } from './authSlice';\r\nfunction* handleLogin(payload: LoginPayload) {\r\n\tconsole.log('Login', payload);\r\n}\r\nfunction* handleLogout() {\r\n\tconsole.log('Logout');\r\n}\r\nfunction* watchLoginFlow() {\r\n\twhile (true) {\r\n\t\tconst action: PayloadAction<LoginPayload> = yield take(authActions.login.type);\r\n\t\tyield fork(handleLogin, action.payload);\r\n\t\tyield take(authActions.logout.type);\r\n\t\tyield fork(handleLogout);\r\n\t}\r\n}\r\nexport default function* authSaga() {\r\n\tyield fork(watchLoginFlow);\r\n}\r\n"],"mappings":"AACA,SAASA,IAAT,EAAeC,IAAf,QAA2B,oBAA3B;AACA,SAASC,WAAT,QAA0C,aAA1C;;AACA,UAAUC,WAAV,CAAsBC,OAAtB,EAA6C;EAC5CC,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,OAArB;AACA;;AACD,UAAUG,YAAV,GAAyB;EACxBF,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA;;AACD,UAAUE,cAAV,GAA2B;EAC1B,OAAO,IAAP,EAAa;IACZ,MAAMC,MAAmC,GAAG,MAAMR,IAAI,CAACC,WAAW,CAACQ,KAAZ,CAAkBC,IAAnB,CAAtD;IACA,MAAMX,IAAI,CAACG,WAAD,EAAcM,MAAM,CAACL,OAArB,CAAV;IACA,MAAMH,IAAI,CAACC,WAAW,CAACU,MAAZ,CAAmBD,IAApB,CAAV;IACA,MAAMX,IAAI,CAACO,YAAD,CAAV;EACA;AACD;;AACD,eAAe,UAAUM,QAAV,GAAqB;EACnC,MAAMb,IAAI,CAACQ,cAAD,CAAV;AACA"},"metadata":{},"sourceType":"module"}