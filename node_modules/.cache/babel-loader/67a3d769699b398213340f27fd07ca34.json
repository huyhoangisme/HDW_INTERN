{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\nconst initialState = {\n  value: 0,\n  status: 'idle'\n}; // The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\n\nexport const incrementAsync = createAsyncThunk('counter/fetchCount', async amount => {\n  const response = await fetchCount(amount); // The value we return becomes the `fulfilled` action payload\n\n  return response.data;\n});\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n    incrementSaga: (state, action) => {\n      state.status = 'loading';\n    },\n    incrementSagaSuccess: (state, action) => {\n      state.status = 'idle';\n      state.value += action.payload;\n    }\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: builder => {\n    builder.addCase(incrementAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(incrementAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.value += action.payload;\n    }).addCase(incrementAsync.rejected, state => {\n      state.status = 'failed';\n    });\n  }\n});\nexport const {\n  increment,\n  decrement,\n  incrementByAmount,\n  incrementSaga,\n  incrementSagaSuccess\n} = counterSlice.actions; // The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\n\nexport const selectCount = state => state.counter.value; // We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\n\nexport const incrementIfOdd = amount => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\nexport default counterSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","fetchCount","initialState","value","status","incrementAsync","amount","response","data","counterSlice","name","reducers","increment","state","decrement","incrementByAmount","action","payload","incrementSaga","incrementSagaSuccess","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","selectCount","counter","incrementIfOdd","dispatch","getState","currentValue","reducer"],"sources":["C:/Workspace/INTERN/react-saga/src/features/counter/counterSlice.ts"],"sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\nimport { fetchCount } from './counterAPI';\n\nexport interface CounterState {\n\tvalue: number;\n\tstatus: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: CounterState = {\n\tvalue: 0,\n\tstatus: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk('counter/fetchCount', async (amount: number) => {\n\tconst response = await fetchCount(amount);\n\t// The value we return becomes the `fulfilled` action payload\n\treturn response.data;\n});\n\nexport const counterSlice = createSlice({\n\tname: 'counter',\n\tinitialState,\n\t// The `reducers` field lets us define reducers and generate associated actions\n\treducers: {\n\t\tincrement: (state) => {\n\t\t\t// Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n\t\t\t// doesn't actually mutate the state because it uses the Immer library,\n\t\t\t// which detects changes to a \"draft state\" and produces a brand new\n\t\t\t// immutable state based off those changes\n\t\t\tstate.value += 1;\n\t\t},\n\t\tdecrement: (state) => {\n\t\t\tstate.value -= 1;\n\t\t},\n\t\t// Use the PayloadAction type to declare the contents of `action.payload`\n\t\tincrementByAmount: (state, action: PayloadAction<number>) => {\n\t\t\tstate.value += action.payload;\n\t\t},\n\t\tincrementSaga: (state,action: PayloadAction<number>) => {\n\t\t\tstate.status = 'loading';\n\t\t},\n\t\tincrementSagaSuccess: (state, action: PayloadAction<number>) => {\n\t\t\tstate.status = 'idle';\n\t\t\tstate.value += action.payload;\n\t\t}\n\t},\n\t// The `extraReducers` field lets the slice handle actions defined elsewhere,\n\t// including actions generated by createAsyncThunk or in other slices.\n\textraReducers: (builder) => {\n\t\tbuilder\n\t\t\t.addCase(incrementAsync.pending, (state) => {\n\t\t\t\tstate.status = 'loading';\n\t\t\t})\n\t\t\t.addCase(incrementAsync.fulfilled, (state, action) => {\n\t\t\t\tstate.status = 'idle';\n\t\t\t\tstate.value += action.payload;\n\t\t\t})\n\t\t\t.addCase(incrementAsync.rejected, (state) => {\n\t\t\t\tstate.status = 'failed';\n\t\t\t});\n\t},\n});\n\nexport const { increment, decrement, incrementByAmount,incrementSaga,incrementSagaSuccess } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd =\n\t(amount: number): AppThunk =>\n\t(dispatch, getState) => {\n\t\tconst currentValue = selectCount(getState());\n\t\tif (currentValue % 2 === 1) {\n\t\t\tdispatch(incrementByAmount(amount));\n\t\t}\n\t};\n\nexport default counterSlice.reducer;\n"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA6D,kBAA7D;AAEA,SAASC,UAAT,QAA2B,cAA3B;AAOA,MAAMC,YAA0B,GAAG;EAClCC,KAAK,EAAE,CAD2B;EAElCC,MAAM,EAAE;AAF0B,CAAnC,C,CAKA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,cAAc,GAAGN,gBAAgB,CAAC,oBAAD,EAAuB,MAAOO,MAAP,IAA0B;EAC9F,MAAMC,QAAQ,GAAG,MAAMN,UAAU,CAACK,MAAD,CAAjC,CAD8F,CAE9F;;EACA,OAAOC,QAAQ,CAACC,IAAhB;AACA,CAJ6C,CAAvC;AAMP,OAAO,MAAMC,YAAY,GAAGT,WAAW,CAAC;EACvCU,IAAI,EAAE,SADiC;EAEvCR,YAFuC;EAGvC;EACAS,QAAQ,EAAE;IACTC,SAAS,EAAGC,KAAD,IAAW;MACrB;MACA;MACA;MACA;MACAA,KAAK,CAACV,KAAN,IAAe,CAAf;IACA,CAPQ;IAQTW,SAAS,EAAGD,KAAD,IAAW;MACrBA,KAAK,CAACV,KAAN,IAAe,CAAf;IACA,CAVQ;IAWT;IACAY,iBAAiB,EAAE,CAACF,KAAD,EAAQG,MAAR,KAA0C;MAC5DH,KAAK,CAACV,KAAN,IAAea,MAAM,CAACC,OAAtB;IACA,CAdQ;IAeTC,aAAa,EAAE,CAACL,KAAD,EAAOG,MAAP,KAAyC;MACvDH,KAAK,CAACT,MAAN,GAAe,SAAf;IACA,CAjBQ;IAkBTe,oBAAoB,EAAE,CAACN,KAAD,EAAQG,MAAR,KAA0C;MAC/DH,KAAK,CAACT,MAAN,GAAe,MAAf;MACAS,KAAK,CAACV,KAAN,IAAea,MAAM,CAACC,OAAtB;IACA;EArBQ,CAJ6B;EA2BvC;EACA;EACAG,aAAa,EAAGC,OAAD,IAAa;IAC3BA,OAAO,CACLC,OADF,CACUjB,cAAc,CAACkB,OADzB,EACmCV,KAAD,IAAW;MAC3CA,KAAK,CAACT,MAAN,GAAe,SAAf;IACA,CAHF,EAIEkB,OAJF,CAIUjB,cAAc,CAACmB,SAJzB,EAIoC,CAACX,KAAD,EAAQG,MAAR,KAAmB;MACrDH,KAAK,CAACT,MAAN,GAAe,MAAf;MACAS,KAAK,CAACV,KAAN,IAAea,MAAM,CAACC,OAAtB;IACA,CAPF,EAQEK,OARF,CAQUjB,cAAc,CAACoB,QARzB,EAQoCZ,KAAD,IAAW;MAC5CA,KAAK,CAACT,MAAN,GAAe,QAAf;IACA,CAVF;EAWA;AAzCsC,CAAD,CAAhC;AA4CP,OAAO,MAAM;EAAEQ,SAAF;EAAaE,SAAb;EAAwBC,iBAAxB;EAA0CG,aAA1C;EAAwDC;AAAxD,IAAiFV,YAAY,CAACiB,OAApG,C,CAEP;AACA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAId,KAAD,IAAsBA,KAAK,CAACe,OAAN,CAAczB,KAAxD,C,CAEP;AACA;;AACA,OAAO,MAAM0B,cAAc,GACzBvB,MAAD,IACA,CAACwB,QAAD,EAAWC,QAAX,KAAwB;EACvB,MAAMC,YAAY,GAAGL,WAAW,CAACI,QAAQ,EAAT,CAAhC;;EACA,IAAIC,YAAY,GAAG,CAAf,KAAqB,CAAzB,EAA4B;IAC3BF,QAAQ,CAACf,iBAAiB,CAACT,MAAD,CAAlB,CAAR;EACA;AACD,CAPK;AASP,eAAeG,YAAY,CAACwB,OAA5B"},"metadata":{},"sourceType":"module"}